{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN9nWm80Ubv8dHiHwLbu+Tq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"IIEo5S49Ve3Q","executionInfo":{"status":"ok","timestamp":1718230253421,"user_tz":180,"elapsed":2407,"user":{"displayName":"Guilherme Reis","userId":"07953779074170014583"}},"outputId":"56fb2c92-6f63-40b0-f353-fc19eb138167","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Previsão para o novo e-mail: Não Spam\n","Accuracy: 1.0\n","Accuracy: 0.0\n","Accuracy: 0.0\n","Accuracy: 1.0\n"]}],"source":["from sklearn.naive_bayes import GaussianNB\n","\n","# Dados de exemplo\n","X = [[200, 20], [150, 30], [120, 25], [140, 28]]\n","y = ['Não Spam', 'Spam', 'Não Spam', 'Spam']\n","\n","# Para criar o modelo, de acordo com os slides\n","model = GaussianNB()\n","\n","# Treinando o modelo\n","model.fit(X, y)\n","\n","# Previsão para um novo e-mail\n","novo_email = [[160, 20]]\n","resultado = model.predict(novo_email)\n","print(f\"Previsão para o novo e-mail: {resultado[0]}\")\n","\n","\"\"\"NAIVE BAYES\"\"\"\n","\n","# Passo 1: Importar as bibliotecas necessárias\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.metrics import accuracy_score\n","\n","# Passo 2: Preparar os dados\n","# Os emails a seguir serão organizados em spam e não spam\n","emails = [\n","    \"Oferta imperdível! Ganhe 50% de desconto em todos os produtos!\",\n","    \"Você ganhou um prêmio de R$ 18.000! Clique aqui para resgatar.\",\n","    \"Confira as novas ofertas da loja. Não perca!\",\n","    \"Reunião de equipe amanhã às 10h. Por favor, confirme sua presença.\",\n","    \"Lembrete: pagamento da fatura do cartão de crédito vence amanhã.\",\n","]\n","labels = [1, 1, 0, 0, 0] # Usando binário, 1 é spam, 0, não\n","\n","# Passo 3: Usar a técnica de Bag of Words para transformar os dados em uma contagem\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(emails)\n","\n","# Passo 4: Fazer a divisão de conjuntos: Testes e Treino\n","X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)\n","\n","# Passo 5: Criar e treinar o modelo\n","model = MultinomialNB() # Naive Bayes multinomial\n","model.fit(X_train, y_train) # Treinar o modelo com o conjunto de treino\n","\n","# Passo 6: fazer previsões\n","predictions = model.predict(X_test) # Previsões com base no modelo de testes\n","\n","# Passo 7: Avaliar a precisão do modelo\n","accuracy = accuracy_score(y_test, predictions) # Saber a precisão do modelo\n","print(\"Accuracy:\", accuracy)\n","\n","\"\"\"KNN\"\"\"\n","\n","# Passo 1: Importar as bibliotecas necessárias\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Passo 2: Preparar os dados\n","# Os emails a seguir serão organizados em spam e não spam\n","emails = [\n","    \"Oferta imperdível! Ganhe 50% de desconto em todos os produtos!\",\n","    \"Você ganhou um prêmio de R$ 18.000! Clique aqui para resgatar.\",\n","    \"Confira as novas ofertas da loja. Não perca!\",\n","    \"Reunião de equipe amanhã às 10h. Por favor, confirme sua presença.\",\n","    \"Lembrete: pagamento da fatura do cartão de crédito vence amanhã.\",\n","]\n","labels = [1, 1, 0, 0, 0] # 1 para spam, 0 para não spam\n","\n","# Passo 3: Usar a técnica de Bag of Words para transformar os dados em uma contagem\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(emails)\n","\n","# Passo 4: Fazer a divisão de conjuntos: Testes e Treino\n","X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)\n","\n","# Passo 5: Criar e treinar o modelo KNN\n","model = KNeighborsClassifier(n_neighbors=3) # Modelo KNN com 3 vizinhos\n","model.fit(X_train, y_train) # Treinar o modelo com o conjunto de treino\n","\n","# Passo 6: Fazer previsões\n","predictions = model.predict(X_test) # Fazer previsões usando o conjunto de testes\n","\n","# Passo 7: Avaliar a precisão do modelo\n","accuracy = accuracy_score(y_test, predictions) # Saber a precisão do modelo\n","print(\"Accuracy:\", accuracy)\n","\n","\"\"\"SVN\"\"\"\n","\n","# Passo 1: Importar as bibliotecas necessárias\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","\n","# Passo 2: Preparar os dados\n","# Os emails a seguir serão organizados em spam e não spam\n","emails = [\n","    \"Oferta imperdível! Ganhe 50% de desconto em todos os produtos!\",\n","    \"Você ganhou um prêmio de R$ 18.000! Clique aqui para resgatar.\",\n","    \"Confira as novas ofertas da loja. Não perca!\",\n","    \"Reunião de equipe amanhã às 10h. Por favor, confirme sua presença.\",\n","    \"Lembrete: pagamento da fatura do cartão de crédito vence amanhã.\",\n","]\n","labels = [1, 1, 0, 0, 0] # 1 para spam, 0 para não spam\n","\n","# Passo 3: Usar a técnica de Bag of Words para transformar os dados em uma contagem\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(emails)\n","\n","# Passo 4: Fazer a divisão de conjuntos: Testes e Treino\n","X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)\n","\n","# Passo 5: Criar e treinar o modelo SVM\n","model = SVC(kernel='linear') # Criar o modelo SVM com kernel linear\n","model.fit(X_train, y_train) # Treinar o modelo com o conjunto de treino\n","\n","# Passo 6: Fazer previsões\n","predictions = model.predict(X_test) # Fazer previsões usando o conjunto de testes\n","\n","# Passo 7: Avaliar a precisão do modelo\n","accuracy = accuracy_score(y_test, predictions) # Saber a precisão do modelo\n","print(\"Accuracy:\", accuracy)\n","\n","\n","\"\"\"TREE DECISION\"\"\"\n","\n","# Passo 1: Importar as bibliotecas necessárias\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Passo 2: Preparar os dados\n","# Os emails a seguir serão organizados em spam e não spam\n","emails = [\n","    \"Oferta imperdível! Ganhe 50% de desconto em todos os produtos!\",\n","    \"Você ganhou um prêmio de R$ 18.000! Clique aqui para resgatar.\",\n","    \"Confira as novas ofertas da loja. Não perca!\",\n","    \"Reunião de equipe amanhã às 10h. Por favor, confirme sua presença.\",\n","    \"Lembrete: pagamento da fatura do cartão de crédito vence amanhã.\",\n","]\n","\n","labels = [1, 1, 1, 0, 0] # 1 para spam, 0 para não span\n","\n","# Passo 3: Usar a técnica de Bag of Words para transformar os dados em uma contagem\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(emails)\n","\n","# Passo 4: Fazer a divisão de conjuntos: Testes e Treino\n","X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)\n","\n","# Passo 5: Criar e treinar o modelo SVM\n","model = DecisionTreeClassifier() # Criar o modelo Árvore de Decisões\n","model.fit(X_train, y_train) # Treinar o modelo com o conjunto de treino\n","\n","# Passo 6: Fazer previsões\n","predictions = model.predict(X_test) # Fazer previsões usando o conjunto de testes\n","\n","# Passo 7: Avaliar a precisão do modelo\n","accuracy = accuracy_score(y_test, predictions) # Saber a precisão do modelo\n","print(\"Accuracy:\", accuracy)"]}]}